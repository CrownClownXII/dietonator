// <auto-generated />
using System;
using Dietonator.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dietonator.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220829192726_InitMigration")]
    partial class InitMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Dietonator.Domain.Entities.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("createdby");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("lastmodifiedby");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_meals");

                    b.ToTable("meals", (string)null);
                });

            modelBuilder.Entity("Dietonator.Domain.Entities.MealPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("createdby");

                    b.Property<DateOnly>("ForDate")
                        .HasColumnType("date")
                        .HasColumnName("fordate");

                    b.Property<Guid>("ForUser")
                        .HasColumnType("uuid")
                        .HasColumnName("foruser");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("lastmodifiedby");

                    b.HasKey("Id")
                        .HasName("pk_mealplan");

                    b.ToTable("mealplan", (string)null);
                });

            modelBuilder.Entity("Dietonator.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<float>("Carbohydrates")
                        .HasColumnType("real")
                        .HasColumnName("carbohydrates");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("createdby");

                    b.Property<float>("Fats")
                        .HasColumnType("real")
                        .HasColumnName("fats");

                    b.Property<int>("Kcal")
                        .HasColumnType("integer")
                        .HasColumnName("kcal");

                    b.Property<DateTimeOffset?>("LastModified")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lastmodified");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("lastmodifiedby");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<float>("Proteins")
                        .HasColumnType("real")
                        .HasColumnName("proteins");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("MealMealPlan", b =>
                {
                    b.Property<Guid>("MealPlansId")
                        .HasColumnType("uuid")
                        .HasColumnName("mealplansid");

                    b.Property<Guid>("MealsId")
                        .HasColumnType("uuid")
                        .HasColumnName("mealsid");

                    b.HasKey("MealPlansId", "MealsId")
                        .HasName("pk_mealmealplan");

                    b.HasIndex("MealsId")
                        .HasDatabaseName("ix_mealmealplan_mealsid");

                    b.ToTable("mealmealplan", (string)null);
                });

            modelBuilder.Entity("MealProduct", b =>
                {
                    b.Property<Guid>("MealsId")
                        .HasColumnType("uuid")
                        .HasColumnName("mealsid");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid")
                        .HasColumnName("productsid");

                    b.HasKey("MealsId", "ProductsId")
                        .HasName("pk_mealproduct");

                    b.HasIndex("ProductsId")
                        .HasDatabaseName("ix_mealproduct_productsid");

                    b.ToTable("mealproduct", (string)null);
                });

            modelBuilder.Entity("MealMealPlan", b =>
                {
                    b.HasOne("Dietonator.Domain.Entities.MealPlan", null)
                        .WithMany()
                        .HasForeignKey("MealPlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mealmealplan_mealplan_mealplansid");

                    b.HasOne("Dietonator.Domain.Entities.Meal", null)
                        .WithMany()
                        .HasForeignKey("MealsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mealmealplan_meals_mealsid");
                });

            modelBuilder.Entity("MealProduct", b =>
                {
                    b.HasOne("Dietonator.Domain.Entities.Meal", null)
                        .WithMany()
                        .HasForeignKey("MealsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mealproduct_meals_mealsid");

                    b.HasOne("Dietonator.Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_mealproduct_products_productsid");
                });
#pragma warning restore 612, 618
        }
    }
}
